// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/11/2022 14:24:48"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          alumod
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module alumod_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] AP;
reg [15:0] BP;
reg [15:0] FP;
reg generala;
reg generalb;
reg [15:0] opA;
reg [15:0] opB;
reg sub;
// wires                                               
wire [15:0] fadder;
wire [15:0] falulogic;
wire generalc;
wire generald;
wire overflow;

// assign statements (if any)                          
alumod i1 (
// port map - connection between master ports and signals/registers   
	.AP(AP),
	.BP(BP),
	.fadder(fadder),
	.falulogic(falulogic),
	.FP(FP),
	.generala(generala),
	.generalb(generalb),
	.generalc(generalc),
	.generald(generald),
	.opA(opA),
	.opB(opB),
	.overflow(overflow),
	.sub(sub)
);
initial 
begin 
#1000000 $finish;
end 
// AP[ 15 ]
initial
begin
	AP[15] = 1'b0;
end 
// AP[ 14 ]
initial
begin
	AP[14] = 1'b0;
end 
// AP[ 13 ]
initial
begin
	AP[13] = 1'b0;
end 
// AP[ 12 ]
initial
begin
	AP[12] = 1'b0;
end 
// AP[ 11 ]
initial
begin
	AP[11] = 1'b0;
end 
// AP[ 10 ]
initial
begin
	AP[10] = 1'b0;
end 
// AP[ 9 ]
initial
begin
	AP[9] = 1'b0;
end 
// AP[ 8 ]
initial
begin
	AP[8] = 1'b0;
end 
// AP[ 7 ]
initial
begin
	AP[7] = 1'b0;
end 
// AP[ 6 ]
initial
begin
	AP[6] = 1'b0;
end 
// AP[ 5 ]
initial
begin
	AP[5] = 1'b0;
end 
// AP[ 4 ]
initial
begin
	AP[4] = 1'b0;
end 
// AP[ 3 ]
initial
begin
	AP[3] = 1'b0;
end 
// AP[ 2 ]
initial
begin
	AP[2] = 1'b0;
end 
// AP[ 1 ]
initial
begin
	AP[1] = 1'b0;
end 
// AP[ 0 ]
initial
begin
	AP[0] = 1'b0;
end 
// BP[ 15 ]
initial
begin
	BP[15] = 1'b0;
end 
// BP[ 14 ]
initial
begin
	BP[14] = 1'b0;
end 
// BP[ 13 ]
initial
begin
	BP[13] = 1'b0;
end 
// BP[ 12 ]
initial
begin
	BP[12] = 1'b0;
end 
// BP[ 11 ]
initial
begin
	BP[11] = 1'b0;
end 
// BP[ 10 ]
initial
begin
	BP[10] = 1'b0;
end 
// BP[ 9 ]
initial
begin
	BP[9] = 1'b0;
end 
// BP[ 8 ]
initial
begin
	BP[8] = 1'b0;
end 
// BP[ 7 ]
initial
begin
	BP[7] = 1'b0;
end 
// BP[ 6 ]
initial
begin
	BP[6] = 1'b0;
end 
// BP[ 5 ]
initial
begin
	BP[5] = 1'b0;
end 
// BP[ 4 ]
initial
begin
	BP[4] = 1'b0;
end 
// BP[ 3 ]
initial
begin
	BP[3] = 1'b0;
end 
// BP[ 2 ]
initial
begin
	BP[2] = 1'b0;
end 
// BP[ 1 ]
initial
begin
	BP[1] = 1'b0;
end 
// BP[ 0 ]
initial
begin
	BP[0] = 1'b0;
end 
// FP[ 15 ]
initial
begin
	FP[15] = 1'b0;
end 
// FP[ 14 ]
initial
begin
	FP[14] = 1'b0;
end 
// FP[ 13 ]
initial
begin
	FP[13] = 1'b0;
end 
// FP[ 12 ]
initial
begin
	FP[12] = 1'b0;
end 
// FP[ 11 ]
initial
begin
	FP[11] = 1'b0;
end 
// FP[ 10 ]
initial
begin
	FP[10] = 1'b0;
end 
// FP[ 9 ]
initial
begin
	FP[9] = 1'b0;
end 
// FP[ 8 ]
initial
begin
	FP[8] = 1'b0;
end 
// FP[ 7 ]
initial
begin
	FP[7] = 1'b0;
end 
// FP[ 6 ]
initial
begin
	FP[6] = 1'b0;
end 
// FP[ 5 ]
initial
begin
	FP[5] = 1'b0;
end 
// FP[ 4 ]
initial
begin
	FP[4] = 1'b0;
end 
// FP[ 3 ]
initial
begin
	FP[3] = 1'b0;
end 
// FP[ 2 ]
initial
begin
	FP[2] = 1'b0;
end 
// FP[ 1 ]
initial
begin
	FP[1] = 1'b0;
end 
// FP[ 0 ]
initial
begin
	FP[0] = 1'b0;
end 
// opA[ 15 ]
initial
begin
	opA[15] = 1'b0;
	opA[15] = #10000 1'b1;
	opA[15] = #10000 1'b0;
	opA[15] = #850000 1'b1;
	opA[15] = #10000 1'b0;
end 
// opA[ 14 ]
initial
begin
	opA[14] = 1'b0;
	opA[14] = #870000 1'b1;
	opA[14] = #10000 1'b0;
end 
// opA[ 13 ]
initial
begin
	opA[13] = 1'b0;
	opA[13] = #10000 1'b1;
	opA[13] = #10000 1'b0;
	opA[13] = #850000 1'b1;
	opA[13] = #10000 1'b0;
end 
// opA[ 12 ]
initial
begin
	opA[12] = 1'b0;
	opA[12] = #10000 1'b1;
	opA[12] = #10000 1'b0;
	opA[12] = #850000 1'b1;
	opA[12] = #10000 1'b0;
end 
// opA[ 11 ]
initial
begin
	opA[11] = 1'b1;
	opA[11] = #10000 1'b0;
	opA[11] = #860000 1'b1;
	opA[11] = #10000 1'b0;
end 
// opA[ 10 ]
initial
begin
	opA[10] = 1'b0;
	opA[10] = #870000 1'b1;
	opA[10] = #10000 1'b0;
end 
// opA[ 9 ]
initial
begin
	opA[9] = 1'b1;
	opA[9] = #10000 1'b0;
	opA[9] = #860000 1'b1;
	opA[9] = #10000 1'b0;
end 
// opA[ 8 ]
initial
begin
	opA[8] = 1'b0;
	opA[8] = #870000 1'b1;
	opA[8] = #10000 1'b0;
end 
// opA[ 7 ]
initial
begin
	opA[7] = 1'b0;
	opA[7] = #10000 1'b1;
	opA[7] = #10000 1'b0;
	opA[7] = #850000 1'b1;
	opA[7] = #10000 1'b0;
end 
// opA[ 6 ]
initial
begin
	opA[6] = 1'b0;
	opA[6] = #870000 1'b1;
	opA[6] = #10000 1'b0;
end 
// opA[ 5 ]
initial
begin
	opA[5] = 1'b0;
	opA[5] = #10000 1'b1;
	opA[5] = #10000 1'b0;
	opA[5] = #850000 1'b1;
	opA[5] = #10000 1'b0;
end 
// opA[ 4 ]
initial
begin
	opA[4] = 1'b0;
	opA[4] = #10000 1'b1;
	opA[4] = #10000 1'b0;
	opA[4] = #850000 1'b1;
	opA[4] = #10000 1'b0;
end 
// opA[ 3 ]
initial
begin
	opA[3] = 1'b1;
	opA[3] = #10000 1'b0;
	opA[3] = #860000 1'b1;
	opA[3] = #10000 1'b0;
end 
// opA[ 2 ]
initial
begin
	opA[2] = 1'b0;
	opA[2] = #870000 1'b1;
	opA[2] = #10000 1'b0;
end 
// opA[ 1 ]
initial
begin
	opA[1] = 1'b1;
	opA[1] = #10000 1'b0;
	opA[1] = #860000 1'b1;
	opA[1] = #10000 1'b0;
end 
// opA[ 0 ]
initial
begin
	opA[0] = 1'b0;
	opA[0] = #870000 1'b1;
	opA[0] = #10000 1'b0;
end 
// opB[ 15 ]
initial
begin
	opB[15] = 1'b1;
	opB[15] = #10000 1'b0;
end 
// opB[ 14 ]
initial
begin
	opB[14] = 1'b0;
end 
// opB[ 13 ]
initial
begin
	opB[13] = 1'b1;
	opB[13] = #10000 1'b0;
end 
// opB[ 12 ]
initial
begin
	opB[12] = 1'b1;
	opB[12] = #10000 1'b0;
end 
// opB[ 11 ]
initial
begin
	opB[11] = 1'b0;
	opB[11] = #10000 1'b1;
	opB[11] = #10000 1'b0;
end 
// opB[ 10 ]
initial
begin
	opB[10] = 1'b0;
end 
// opB[ 9 ]
initial
begin
	opB[9] = 1'b0;
	opB[9] = #10000 1'b1;
	opB[9] = #10000 1'b0;
end 
// opB[ 8 ]
initial
begin
	opB[8] = 1'b0;
end 
// opB[ 7 ]
initial
begin
	opB[7] = 1'b1;
	opB[7] = #10000 1'b0;
end 
// opB[ 6 ]
initial
begin
	opB[6] = 1'b0;
end 
// opB[ 5 ]
initial
begin
	opB[5] = 1'b1;
	opB[5] = #10000 1'b0;
end 
// opB[ 4 ]
initial
begin
	opB[4] = 1'b1;
	opB[4] = #10000 1'b0;
end 
// opB[ 3 ]
initial
begin
	opB[3] = 1'b0;
	opB[3] = #10000 1'b1;
	opB[3] = #10000 1'b0;
end 
// opB[ 2 ]
initial
begin
	opB[2] = 1'b0;
end 
// opB[ 1 ]
initial
begin
	opB[1] = 1'b0;
	opB[1] = #10000 1'b1;
	opB[1] = #10000 1'b0;
end 
// opB[ 0 ]
initial
begin
	opB[0] = 1'b0;
end 

// sub
initial
begin
	sub = 1'b0;
end 
endmodule

