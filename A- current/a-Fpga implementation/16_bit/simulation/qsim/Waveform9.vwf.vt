// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/14/2022 13:13:39"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          8bitdlatch
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module 8bitdlatch_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] wb;
reg wclk;
// wires                                               
wire [15:0] wa;

// assign statements (if any)                          
8bitdlatch i1 (
// port map - connection between master ports and signals/registers   
	.wa(wa),
	.wb(wb),
	.wclk(wclk)
);
initial 
begin 
#1000000 $finish;
end 
// wb[ 15 ]
initial
begin
	wb[15] = 1'b0;
end 
// wb[ 14 ]
initial
begin
	wb[14] = 1'b0;
end 
// wb[ 13 ]
initial
begin
	wb[13] = 1'b0;
end 
// wb[ 12 ]
initial
begin
	wb[12] = 1'b0;
end 
// wb[ 11 ]
initial
begin
	wb[11] = 1'b0;
end 
// wb[ 10 ]
initial
begin
	wb[10] = 1'b0;
end 
// wb[ 9 ]
initial
begin
	wb[9] = 1'b0;
end 
// wb[ 8 ]
initial
begin
	wb[8] = 1'b0;
end 
// wb[ 7 ]
initial
begin
	wb[7] = 1'b0;
end 
// wb[ 6 ]
initial
begin
	wb[6] = 1'b0;
	wb[6] = #640000 1'b1;
end 
// wb[ 5 ]
initial
begin
	wb[5] = 1'b0;
	wb[5] = #320000 1'b1;
	wb[5] = #320000 1'b0;
	wb[5] = #320000 1'b1;
end 
// wb[ 4 ]
initial
begin
	repeat(3)
	begin
		wb[4] = 1'b0;
		wb[4] = #160000 1'b1;
		# 160000;
	end
	wb[4] = 1'b0;
end 
// wb[ 3 ]
initial
begin
	repeat(6)
	begin
		wb[3] = 1'b0;
		wb[3] = #80000 1'b1;
		# 80000;
	end
	wb[3] = 1'b0;
end 
// wb[ 2 ]
initial
begin
	repeat(12)
	begin
		wb[2] = 1'b0;
		wb[2] = #40000 1'b1;
		# 40000;
	end
	wb[2] = 1'b0;
end 
// wb[ 1 ]
always
begin
	wb[1] = 1'b0;
	wb[1] = #20000 1'b1;
	#20000;
end 
// wb[ 0 ]
always
begin
	wb[0] = 1'b0;
	wb[0] = #10000 1'b1;
	#10000;
end 

// wclk
always
begin
	wclk = 1'b0;
	wclk = #10000 1'b1;
	#10000;
end 
endmodule

