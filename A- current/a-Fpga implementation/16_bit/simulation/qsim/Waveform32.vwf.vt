// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/17/2022 13:19:58"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          processor
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module processor_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK_50;
reg generala;
reg KEY0;
reg KEY1;
reg KEY2;
reg KEY3;
reg sw0;
reg sw1;
reg sw2;
reg sw3;
reg sw4;
reg sw5;
reg sw6;
reg sw7;
reg sw8;
reg sw9;
// wires                                               
wire generalc;
wire HEX00;
wire HEX01;
wire HEX02;
wire HEX03;
wire HEX04;
wire HEX05;
wire HEX06;
wire HEX10;
wire HEX11;
wire HEX12;
wire HEX13;
wire HEX14;
wire HEX15;
wire HEX16;
wire HEX20;
wire HEX21;
wire HEX22;
wire HEX23;
wire HEX24;
wire HEX25;
wire HEX26;
wire HEX30;
wire HEX31;
wire HEX32;
wire HEX33;
wire HEX34;
wire HEX35;
wire HEX36;
wire HEX40;
wire HEX41;
wire HEX42;
wire HEX43;
wire HEX44;
wire HEX45;
wire HEX46;
wire HEX50;
wire HEX51;
wire HEX52;
wire HEX53;
wire HEX54;
wire HEX55;
wire HEX56;
wire [15:0] incremented;
wire LEDR1;
wire LEDR2;
wire LEDR4;
wire LEDR5;
wire LEDR7;
wire LEDR8;
wire [15:0] preincremented;
wire progcountclock;
wire [15:0] progcountinput;
wire sendtoprogen;
wire state0;
wire state1;
wire state2;

// assign statements (if any)                          
processor i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK_50(CLOCK_50),
	.generala(generala),
	.generalc(generalc),
	.HEX00(HEX00),
	.HEX01(HEX01),
	.HEX02(HEX02),
	.HEX03(HEX03),
	.HEX04(HEX04),
	.HEX05(HEX05),
	.HEX06(HEX06),
	.HEX10(HEX10),
	.HEX11(HEX11),
	.HEX12(HEX12),
	.HEX13(HEX13),
	.HEX14(HEX14),
	.HEX15(HEX15),
	.HEX16(HEX16),
	.HEX20(HEX20),
	.HEX21(HEX21),
	.HEX22(HEX22),
	.HEX23(HEX23),
	.HEX24(HEX24),
	.HEX25(HEX25),
	.HEX26(HEX26),
	.HEX30(HEX30),
	.HEX31(HEX31),
	.HEX32(HEX32),
	.HEX33(HEX33),
	.HEX34(HEX34),
	.HEX35(HEX35),
	.HEX36(HEX36),
	.HEX40(HEX40),
	.HEX41(HEX41),
	.HEX42(HEX42),
	.HEX43(HEX43),
	.HEX44(HEX44),
	.HEX45(HEX45),
	.HEX46(HEX46),
	.HEX50(HEX50),
	.HEX51(HEX51),
	.HEX52(HEX52),
	.HEX53(HEX53),
	.HEX54(HEX54),
	.HEX55(HEX55),
	.HEX56(HEX56),
	.incremented(incremented),
	.KEY0(KEY0),
	.KEY1(KEY1),
	.KEY2(KEY2),
	.KEY3(KEY3),
	.LEDR1(LEDR1),
	.LEDR2(LEDR2),
	.LEDR4(LEDR4),
	.LEDR5(LEDR5),
	.LEDR7(LEDR7),
	.LEDR8(LEDR8),
	.preincremented(preincremented),
	.progcountclock(progcountclock),
	.progcountinput(progcountinput),
	.sendtoprogen(sendtoprogen),
	.state0(state0),
	.state1(state1),
	.state2(state2),
	.sw0(sw0),
	.sw1(sw1),
	.sw2(sw2),
	.sw3(sw3),
	.sw4(sw4),
	.sw5(sw5),
	.sw6(sw6),
	.sw7(sw7),
	.sw8(sw8),
	.sw9(sw9)
);
initial 
begin 
#1000000 $finish;
end 

// KEY0
initial
begin
	KEY0 = 1'b1;
	KEY0 = #300000 1'b0;
	KEY0 = #10000 1'b1;
	KEY0 = #60000 1'b0;
	KEY0 = #10000 1'b1;
end 

// KEY1
initial
begin
	KEY1 = 1'b0;
end 

// KEY2
initial
begin
	KEY2 = 1'b0;
end 

// KEY3
initial
begin
	KEY3 = 1'b0;
end 

// sw0
initial
begin
	sw0 = 1'b0;
end 

// sw1
initial
begin
	sw1 = 1'b0;
end 

// sw2
initial
begin
	sw2 = 1'b0;
end 

// sw3
initial
begin
	sw3 = 1'b0;
end 

// sw4
initial
begin
	sw4 = 1'b0;
end 

// sw5
initial
begin
	sw5 = 1'b0;
end 

// sw6
initial
begin
	sw6 = 1'b0;
end 

// sw7
initial
begin
	sw7 = 1'b0;
end 

// sw8
initial
begin
	sw8 = 1'b0;
end 

// sw9
initial
begin
	sw9 = 1'b1;
end 
endmodule

