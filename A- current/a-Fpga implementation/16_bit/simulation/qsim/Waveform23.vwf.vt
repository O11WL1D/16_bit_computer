// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/03/2022 21:15:47"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          simple_module_test_environment
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module simple_module_test_environment_vlg_vec_tst();
// constants                                           
// general purpose registers
reg aclock;
reg [15:0] adecoder_read_select;
reg [15:0] adecoder_write_select;
reg [15:0] awriteport_input0;
reg [15:0] awriteport_input1;
reg [15:0] awriteport_input2;
// wires                                               
wire [15:0] arasegportout;
wire [15:0] aregportout1;
wire [15:0] aregportout2;

// assign statements (if any)                          
simple_module_test_environment i1 (
// port map - connection between master ports and signals/registers   
	.aclock(aclock),
	.adecoder_read_select(adecoder_read_select),
	.adecoder_write_select(adecoder_write_select),
	.arasegportout(arasegportout),
	.aregportout1(aregportout1),
	.aregportout2(aregportout2),
	.awriteport_input0(awriteport_input0),
	.awriteport_input1(awriteport_input1),
	.awriteport_input2(awriteport_input2)
);
initial 
begin 
#1000000 $finish;
end 

// aclock
initial
begin
	aclock = 1'b0;
	aclock = #30000 1'b1;
	aclock = #10000 1'b0;
	aclock = #40000 1'b1;
	aclock = #10000 1'b0;
	aclock = #90000 1'b1;
	aclock = #10000 1'b0;
	aclock = #340000 1'b1;
	aclock = #10000 1'b0;
	aclock = #170000 1'b1;
	aclock = #10000 1'b0;
end 
// adecoder_read_select[ 15 ]
initial
begin
	adecoder_read_select[15] = 1'b0;
end 
// adecoder_read_select[ 14 ]
initial
begin
	adecoder_read_select[14] = 1'b0;
end 
// adecoder_read_select[ 13 ]
initial
begin
	adecoder_read_select[13] = 1'b0;
end 
// adecoder_read_select[ 12 ]
initial
begin
	adecoder_read_select[12] = 1'b0;
end 
// adecoder_read_select[ 11 ]
initial
begin
	adecoder_read_select[11] = 1'b0;
end 
// adecoder_read_select[ 10 ]
initial
begin
	adecoder_read_select[10] = 1'b0;
	adecoder_read_select[10] = #440000 1'b1;
	adecoder_read_select[10] = #150000 1'b0;
	adecoder_read_select[10] = #80000 1'b1;
end 
// adecoder_read_select[ 9 ]
initial
begin
	adecoder_read_select[9] = 1'b1;
	adecoder_read_select[9] = #700000 1'b0;
	adecoder_read_select[9] = #50000 1'b1;
	adecoder_read_select[9] = #40000 1'b0;
	adecoder_read_select[9] = #20000 1'b1;
end 
// adecoder_read_select[ 8 ]
initial
begin
	adecoder_read_select[8] = 1'b0;
	adecoder_read_select[8] = #440000 1'b1;
	adecoder_read_select[8] = #150000 1'b0;
	adecoder_read_select[8] = #80000 1'b1;
end 
// adecoder_read_select[ 7 ]
initial
begin
	adecoder_read_select[7] = 1'b0;
end 
// adecoder_read_select[ 6 ]
initial
begin
	adecoder_read_select[6] = 1'b0;
	adecoder_read_select[6] = #440000 1'b1;
	adecoder_read_select[6] = #150000 1'b0;
	adecoder_read_select[6] = #80000 1'b1;
end 
// adecoder_read_select[ 5 ]
initial
begin
	adecoder_read_select[5] = 1'b0;
	adecoder_read_select[5] = #440000 1'b1;
	adecoder_read_select[5] = #150000 1'b0;
	adecoder_read_select[5] = #80000 1'b1;
	adecoder_read_select[5] = #30000 1'b0;
	adecoder_read_select[5] = #50000 1'b1;
	adecoder_read_select[5] = #40000 1'b0;
	adecoder_read_select[5] = #20000 1'b1;
end 
// adecoder_read_select[ 4 ]
initial
begin
	adecoder_read_select[4] = 1'b1;
	adecoder_read_select[4] = #440000 1'b0;
	adecoder_read_select[4] = #150000 1'b1;
	adecoder_read_select[4] = #80000 1'b0;
end 
// adecoder_read_select[ 3 ]
initial
begin
	adecoder_read_select[3] = 1'b0;
end 
// adecoder_read_select[ 2 ]
initial
begin
	adecoder_read_select[2] = 1'b0;
	adecoder_read_select[2] = #440000 1'b1;
	adecoder_read_select[2] = #150000 1'b0;
	adecoder_read_select[2] = #80000 1'b1;
	adecoder_read_select[2] = #30000 1'b0;
	adecoder_read_select[2] = #50000 1'b1;
	adecoder_read_select[2] = #40000 1'b0;
	adecoder_read_select[2] = #20000 1'b1;
end 
// adecoder_read_select[ 1 ]
initial
begin
	adecoder_read_select[1] = 1'b0;
	adecoder_read_select[1] = #700000 1'b1;
	adecoder_read_select[1] = #50000 1'b0;
	adecoder_read_select[1] = #40000 1'b1;
	adecoder_read_select[1] = #20000 1'b0;
end 
// adecoder_read_select[ 0 ]
initial
begin
	adecoder_read_select[0] = 1'b0;
	adecoder_read_select[0] = #440000 1'b1;
	adecoder_read_select[0] = #150000 1'b0;
	adecoder_read_select[0] = #80000 1'b1;
end 
// adecoder_write_select[ 15 ]
initial
begin
	adecoder_write_select[15] = 1'b1;
end 
// adecoder_write_select[ 14 ]
initial
begin
	adecoder_write_select[14] = 1'b1;
end 
// adecoder_write_select[ 13 ]
initial
begin
	adecoder_write_select[13] = 1'b1;
end 
// adecoder_write_select[ 12 ]
initial
begin
	adecoder_write_select[12] = 1'b1;
end 
// adecoder_write_select[ 11 ]
initial
begin
	adecoder_write_select[11] = 1'b1;
	adecoder_write_select[11] = #140000 1'b0;
	adecoder_write_select[11] = #90000 1'b1;
	adecoder_write_select[11] = #210000 1'b0;
	adecoder_write_select[11] = #550000 1'b1;
end 
// adecoder_write_select[ 10 ]
initial
begin
	adecoder_write_select[10] = 1'b1;
	adecoder_write_select[10] = #140000 1'b0;
	adecoder_write_select[10] = #90000 1'b1;
end 
// adecoder_write_select[ 9 ]
initial
begin
	adecoder_write_select[9] = 1'b1;
end 
// adecoder_write_select[ 8 ]
initial
begin
	adecoder_write_select[8] = 1'b1;
	adecoder_write_select[8] = #140000 1'b0;
	adecoder_write_select[8] = #90000 1'b1;
end 
// adecoder_write_select[ 7 ]
initial
begin
	adecoder_write_select[7] = 1'b1;
	adecoder_write_select[7] = #50000 1'b0;
	adecoder_write_select[7] = #90000 1'b1;
	adecoder_write_select[7] = #300000 1'b0;
	adecoder_write_select[7] = #550000 1'b1;
end 
// adecoder_write_select[ 6 ]
initial
begin
	adecoder_write_select[6] = 1'b1;
	adecoder_write_select[6] = #50000 1'b0;
	adecoder_write_select[6] = #90000 1'b1;
end 
// adecoder_write_select[ 5 ]
initial
begin
	adecoder_write_select[5] = 1'b1;
	adecoder_write_select[5] = #50000 1'b0;
	adecoder_write_select[5] = #90000 1'b1;
end 
// adecoder_write_select[ 4 ]
initial
begin
	adecoder_write_select[4] = 1'b1;
	adecoder_write_select[4] = #440000 1'b0;
	adecoder_write_select[4] = #550000 1'b1;
end 
// adecoder_write_select[ 3 ]
initial
begin
	adecoder_write_select[3] = 1'b0;
	adecoder_write_select[3] = #50000 1'b1;
	adecoder_write_select[3] = #180000 1'b0;
end 
// adecoder_write_select[ 2 ]
initial
begin
	adecoder_write_select[2] = 1'b0;
	adecoder_write_select[2] = #50000 1'b1;
	adecoder_write_select[2] = #180000 1'b0;
	adecoder_write_select[2] = #210000 1'b1;
	adecoder_write_select[2] = #550000 1'b0;
end 
// adecoder_write_select[ 1 ]
initial
begin
	adecoder_write_select[1] = 1'b0;
	adecoder_write_select[1] = #50000 1'b1;
	adecoder_write_select[1] = #180000 1'b0;
end 
// adecoder_write_select[ 0 ]
initial
begin
	adecoder_write_select[0] = 1'b0;
	adecoder_write_select[0] = #50000 1'b1;
	adecoder_write_select[0] = #180000 1'b0;
	adecoder_write_select[0] = #210000 1'b1;
	adecoder_write_select[0] = #550000 1'b0;
end 
// awriteport_input0[ 15 ]
initial
begin
	awriteport_input0[15] = 1'b1;
end 
// awriteport_input0[ 14 ]
initial
begin
	awriteport_input0[14] = 1'b1;
end 
// awriteport_input0[ 13 ]
initial
begin
	awriteport_input0[13] = 1'b1;
end 
// awriteport_input0[ 12 ]
initial
begin
	awriteport_input0[12] = 1'b1;
	awriteport_input0[12] = #440000 1'b0;
	awriteport_input0[12] = #550000 1'b1;
end 
// awriteport_input0[ 11 ]
initial
begin
	awriteport_input0[11] = 1'b1;
	awriteport_input0[11] = #690000 1'b0;
	awriteport_input0[11] = #290000 1'b1;
end 
// awriteport_input0[ 10 ]
initial
begin
	awriteport_input0[10] = 1'b1;
	awriteport_input0[10] = #690000 1'b0;
	awriteport_input0[10] = #290000 1'b1;
end 
// awriteport_input0[ 9 ]
initial
begin
	awriteport_input0[9] = 1'b1;
	awriteport_input0[9] = #690000 1'b0;
	awriteport_input0[9] = #290000 1'b1;
end 
// awriteport_input0[ 8 ]
initial
begin
	awriteport_input0[8] = 1'b1;
	awriteport_input0[8] = #440000 1'b0;
	awriteport_input0[8] = #250000 1'b1;
	awriteport_input0[8] = #290000 1'b0;
	awriteport_input0[8] = #10000 1'b1;
end 
// awriteport_input0[ 7 ]
initial
begin
	awriteport_input0[7] = 1'b1;
end 
// awriteport_input0[ 6 ]
initial
begin
	awriteport_input0[6] = 1'b1;
end 
// awriteport_input0[ 5 ]
initial
begin
	awriteport_input0[5] = 1'b1;
end 
// awriteport_input0[ 4 ]
initial
begin
	awriteport_input0[4] = 1'b1;
	awriteport_input0[4] = #440000 1'b0;
	awriteport_input0[4] = #550000 1'b1;
end 
// awriteport_input0[ 3 ]
initial
begin
	awriteport_input0[3] = 1'b1;
	awriteport_input0[3] = #690000 1'b0;
	awriteport_input0[3] = #290000 1'b1;
end 
// awriteport_input0[ 2 ]
initial
begin
	awriteport_input0[2] = 1'b1;
	awriteport_input0[2] = #690000 1'b0;
	awriteport_input0[2] = #290000 1'b1;
end 
// awriteport_input0[ 1 ]
initial
begin
	awriteport_input0[1] = 1'b1;
	awriteport_input0[1] = #690000 1'b0;
	awriteport_input0[1] = #290000 1'b1;
end 
// awriteport_input0[ 0 ]
initial
begin
	awriteport_input0[0] = 1'b1;
	awriteport_input0[0] = #440000 1'b0;
	awriteport_input0[0] = #250000 1'b1;
	awriteport_input0[0] = #290000 1'b0;
	awriteport_input0[0] = #10000 1'b1;
end 
// awriteport_input1[ 15 ]
initial
begin
	awriteport_input1[15] = 1'b1;
	awriteport_input1[15] = #460000 1'b0;
	awriteport_input1[15] = #530000 1'b1;
end 
// awriteport_input1[ 14 ]
initial
begin
	awriteport_input1[14] = 1'b0;
	awriteport_input1[14] = #690000 1'b1;
	awriteport_input1[14] = #300000 1'b0;
end 
// awriteport_input1[ 13 ]
initial
begin
	awriteport_input1[13] = 1'b1;
	awriteport_input1[13] = #460000 1'b0;
	awriteport_input1[13] = #230000 1'b1;
end 
// awriteport_input1[ 12 ]
initial
begin
	awriteport_input1[12] = 1'b0;
	awriteport_input1[12] = #690000 1'b1;
	awriteport_input1[12] = #300000 1'b0;
end 
// awriteport_input1[ 11 ]
initial
begin
	awriteport_input1[11] = 1'b1;
	awriteport_input1[11] = #690000 1'b0;
	awriteport_input1[11] = #300000 1'b1;
end 
// awriteport_input1[ 10 ]
initial
begin
	awriteport_input1[10] = 1'b0;
	awriteport_input1[10] = #690000 1'b1;
	awriteport_input1[10] = #300000 1'b0;
end 
// awriteport_input1[ 9 ]
initial
begin
	awriteport_input1[9] = 1'b1;
end 
// awriteport_input1[ 8 ]
initial
begin
	awriteport_input1[8] = 1'b1;
	awriteport_input1[8] = #460000 1'b0;
	awriteport_input1[8] = #230000 1'b1;
end 
// awriteport_input1[ 7 ]
initial
begin
	awriteport_input1[7] = 1'b1;
	awriteport_input1[7] = #690000 1'b0;
	awriteport_input1[7] = #300000 1'b1;
end 
// awriteport_input1[ 6 ]
initial
begin
	awriteport_input1[6] = 1'b0;
	awriteport_input1[6] = #690000 1'b1;
	awriteport_input1[6] = #300000 1'b0;
end 
// awriteport_input1[ 5 ]
initial
begin
	awriteport_input1[5] = 1'b1;
end 
// awriteport_input1[ 4 ]
initial
begin
	awriteport_input1[4] = 1'b0;
	awriteport_input1[4] = #460000 1'b1;
	awriteport_input1[4] = #530000 1'b0;
end 
// awriteport_input1[ 3 ]
initial
begin
	awriteport_input1[3] = 1'b1;
	awriteport_input1[3] = #690000 1'b0;
	awriteport_input1[3] = #300000 1'b1;
end 
// awriteport_input1[ 2 ]
initial
begin
	awriteport_input1[2] = 1'b0;
	awriteport_input1[2] = #460000 1'b1;
	awriteport_input1[2] = #530000 1'b0;
end 
// awriteport_input1[ 1 ]
initial
begin
	awriteport_input1[1] = 1'b1;
	awriteport_input1[1] = #460000 1'b0;
	awriteport_input1[1] = #230000 1'b1;
end 
// awriteport_input1[ 0 ]
initial
begin
	awriteport_input1[0] = 1'b1;
	awriteport_input1[0] = #460000 1'b0;
	awriteport_input1[0] = #230000 1'b1;
end 
// awriteport_input2[ 15 ]
initial
begin
	awriteport_input2[15] = 1'b1;
	awriteport_input2[15] = #690000 1'b0;
	awriteport_input2[15] = #300000 1'b1;
end 
// awriteport_input2[ 14 ]
initial
begin
	awriteport_input2[14] = 1'b0;
end 
// awriteport_input2[ 13 ]
initial
begin
	awriteport_input2[13] = 1'b1;
	awriteport_input2[13] = #690000 1'b0;
	awriteport_input2[13] = #300000 1'b1;
end 
// awriteport_input2[ 12 ]
initial
begin
	awriteport_input2[12] = 1'b1;
end 
// awriteport_input2[ 11 ]
initial
begin
	awriteport_input2[11] = 1'b1;
	awriteport_input2[11] = #470000 1'b0;
	awriteport_input2[11] = #520000 1'b1;
end 
// awriteport_input2[ 10 ]
initial
begin
	awriteport_input2[10] = 1'b0;
end 
// awriteport_input2[ 9 ]
initial
begin
	awriteport_input2[9] = 1'b1;
	awriteport_input2[9] = #470000 1'b0;
	awriteport_input2[9] = #520000 1'b1;
end 
// awriteport_input2[ 8 ]
initial
begin
	awriteport_input2[8] = 1'b0;
end 
// awriteport_input2[ 7 ]
initial
begin
	awriteport_input2[7] = 1'b1;
	awriteport_input2[7] = #690000 1'b0;
	awriteport_input2[7] = #300000 1'b1;
end 
// awriteport_input2[ 6 ]
initial
begin
	awriteport_input2[6] = 1'b0;
	awriteport_input2[6] = #470000 1'b1;
	awriteport_input2[6] = #220000 1'b0;
end 
// awriteport_input2[ 5 ]
initial
begin
	awriteport_input2[5] = 1'b1;
	awriteport_input2[5] = #470000 1'b0;
	awriteport_input2[5] = #520000 1'b1;
end 
// awriteport_input2[ 4 ]
initial
begin
	awriteport_input2[4] = 1'b1;
	awriteport_input2[4] = #470000 1'b0;
	awriteport_input2[4] = #220000 1'b1;
end 
// awriteport_input2[ 3 ]
initial
begin
	awriteport_input2[3] = 1'b1;
	awriteport_input2[3] = #690000 1'b0;
	awriteport_input2[3] = #300000 1'b1;
end 
// awriteport_input2[ 2 ]
initial
begin
	awriteport_input2[2] = 1'b0;
end 
// awriteport_input2[ 1 ]
initial
begin
	awriteport_input2[1] = 1'b1;
	awriteport_input2[1] = #690000 1'b0;
	awriteport_input2[1] = #300000 1'b1;
end 
// awriteport_input2[ 0 ]
initial
begin
	awriteport_input2[0] = 1'b0;
end 
endmodule

