// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/03/2022 20:54:58"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          b16bit_latch
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module b16bit_latch_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg [15:0] reginput;
// wires                                               
wire [15:0] regout;

// assign statements (if any)                          
b16bit_latch i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.reginput(reginput),
	.regout(regout)
);
initial 
begin 
#1000000 $finish;
end 

// clock
initial
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	clock = #10000 1'b0;
end 
// reginput[ 15 ]
initial
begin
	reginput[15] = 1'b0;
	reginput[15] = #10000 1'b1;
	reginput[15] = #30000 1'b0;
end 
// reginput[ 14 ]
initial
begin
	reginput[14] = 1'b0;
	reginput[14] = #10000 1'b1;
	reginput[14] = #30000 1'b0;
end 
// reginput[ 13 ]
initial
begin
	reginput[13] = 1'b0;
	reginput[13] = #10000 1'b1;
	reginput[13] = #30000 1'b0;
end 
// reginput[ 12 ]
initial
begin
	reginput[12] = 1'b0;
	reginput[12] = #10000 1'b1;
	reginput[12] = #30000 1'b0;
end 
// reginput[ 11 ]
initial
begin
	reginput[11] = 1'b0;
	reginput[11] = #10000 1'b1;
	reginput[11] = #30000 1'b0;
end 
// reginput[ 10 ]
initial
begin
	reginput[10] = 1'b0;
	reginput[10] = #10000 1'b1;
	reginput[10] = #30000 1'b0;
end 
// reginput[ 9 ]
initial
begin
	reginput[9] = 1'b0;
	reginput[9] = #10000 1'b1;
	reginput[9] = #30000 1'b0;
end 
// reginput[ 8 ]
initial
begin
	reginput[8] = 1'b0;
	reginput[8] = #10000 1'b1;
	reginput[8] = #30000 1'b0;
end 
// reginput[ 7 ]
initial
begin
	reginput[7] = 1'b0;
	reginput[7] = #10000 1'b1;
	reginput[7] = #30000 1'b0;
end 
// reginput[ 6 ]
initial
begin
	reginput[6] = 1'b0;
	reginput[6] = #10000 1'b1;
	reginput[6] = #30000 1'b0;
end 
// reginput[ 5 ]
initial
begin
	reginput[5] = 1'b0;
	reginput[5] = #10000 1'b1;
	reginput[5] = #30000 1'b0;
end 
// reginput[ 4 ]
initial
begin
	reginput[4] = 1'b0;
	reginput[4] = #10000 1'b1;
	reginput[4] = #30000 1'b0;
end 
// reginput[ 3 ]
initial
begin
	reginput[3] = 1'b0;
	reginput[3] = #10000 1'b1;
	reginput[3] = #30000 1'b0;
end 
// reginput[ 2 ]
initial
begin
	reginput[2] = 1'b0;
	reginput[2] = #10000 1'b1;
	reginput[2] = #30000 1'b0;
end 
// reginput[ 1 ]
initial
begin
	reginput[1] = 1'b0;
	reginput[1] = #10000 1'b1;
	reginput[1] = #30000 1'b0;
end 
// reginput[ 0 ]
initial
begin
	reginput[0] = 1'b0;
	reginput[0] = #10000 1'b1;
	reginput[0] = #30000 1'b0;
end 
endmodule

