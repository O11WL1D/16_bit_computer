// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/04/2022 21:31:57"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          alu_logic
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module alu_logic_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] a;
reg [15:0] ap;
reg [15:0] b;
reg [15:0] bp;
reg [15:0] fp;
// wires                                               
wire [15:0] f;

// assign statements (if any)                          
alu_logic i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.ap(ap),
	.b(b),
	.bp(bp),
	.f(f),
	.fp(fp)
);
initial 
begin 
#500000 $finish;
end 
// ap[ 15 ]
initial
begin
	repeat(6)
	begin
		ap[15] = 1'b0;
		ap[15] = #40000 1'b1;
		# 40000;
	end
	ap[15] = 1'b0;
end 
// ap[ 14 ]
initial
begin
	repeat(6)
	begin
		ap[14] = 1'b0;
		ap[14] = #40000 1'b1;
		# 40000;
	end
	ap[14] = 1'b0;
end 
// ap[ 13 ]
initial
begin
	repeat(6)
	begin
		ap[13] = 1'b0;
		ap[13] = #40000 1'b1;
		# 40000;
	end
	ap[13] = 1'b0;
end 
// ap[ 12 ]
initial
begin
	repeat(6)
	begin
		ap[12] = 1'b0;
		ap[12] = #40000 1'b1;
		# 40000;
	end
	ap[12] = 1'b0;
end 
// ap[ 11 ]
initial
begin
	repeat(6)
	begin
		ap[11] = 1'b0;
		ap[11] = #40000 1'b1;
		# 40000;
	end
	ap[11] = 1'b0;
end 
// ap[ 10 ]
initial
begin
	repeat(6)
	begin
		ap[10] = 1'b0;
		ap[10] = #40000 1'b1;
		# 40000;
	end
	ap[10] = 1'b0;
end 
// ap[ 9 ]
initial
begin
	repeat(6)
	begin
		ap[9] = 1'b0;
		ap[9] = #40000 1'b1;
		# 40000;
	end
	ap[9] = 1'b0;
end 
// ap[ 8 ]
initial
begin
	repeat(6)
	begin
		ap[8] = 1'b0;
		ap[8] = #40000 1'b1;
		# 40000;
	end
	ap[8] = 1'b0;
end 
// ap[ 7 ]
initial
begin
	repeat(6)
	begin
		ap[7] = 1'b0;
		ap[7] = #40000 1'b1;
		# 40000;
	end
	ap[7] = 1'b0;
end 
// ap[ 6 ]
initial
begin
	repeat(6)
	begin
		ap[6] = 1'b0;
		ap[6] = #40000 1'b1;
		# 40000;
	end
	ap[6] = 1'b0;
end 
// ap[ 5 ]
initial
begin
	repeat(6)
	begin
		ap[5] = 1'b0;
		ap[5] = #40000 1'b1;
		# 40000;
	end
	ap[5] = 1'b0;
end 
// ap[ 4 ]
initial
begin
	repeat(6)
	begin
		ap[4] = 1'b0;
		ap[4] = #40000 1'b1;
		# 40000;
	end
	ap[4] = 1'b0;
end 
// ap[ 3 ]
initial
begin
	repeat(6)
	begin
		ap[3] = 1'b0;
		ap[3] = #40000 1'b1;
		# 40000;
	end
	ap[3] = 1'b0;
end 
// ap[ 2 ]
initial
begin
	repeat(6)
	begin
		ap[2] = 1'b0;
		ap[2] = #40000 1'b1;
		# 40000;
	end
	ap[2] = 1'b0;
end 
// ap[ 1 ]
initial
begin
	repeat(6)
	begin
		ap[1] = 1'b0;
		ap[1] = #40000 1'b1;
		# 40000;
	end
	ap[1] = 1'b0;
end 
// ap[ 0 ]
initial
begin
	repeat(6)
	begin
		ap[0] = 1'b0;
		ap[0] = #40000 1'b1;
		# 40000;
	end
	ap[0] = 1'b0;
end 
// bp[ 15 ]
initial
begin
	repeat(3)
	begin
		bp[15] = 1'b0;
		bp[15] = #80000 1'b1;
		# 80000;
	end
	bp[15] = 1'b0;
end 
// bp[ 14 ]
initial
begin
	repeat(3)
	begin
		bp[14] = 1'b0;
		bp[14] = #80000 1'b1;
		# 80000;
	end
	bp[14] = 1'b0;
end 
// bp[ 13 ]
initial
begin
	repeat(3)
	begin
		bp[13] = 1'b0;
		bp[13] = #80000 1'b1;
		# 80000;
	end
	bp[13] = 1'b0;
end 
// bp[ 12 ]
initial
begin
	repeat(3)
	begin
		bp[12] = 1'b0;
		bp[12] = #80000 1'b1;
		# 80000;
	end
	bp[12] = 1'b0;
end 
// bp[ 11 ]
initial
begin
	repeat(3)
	begin
		bp[11] = 1'b0;
		bp[11] = #80000 1'b1;
		# 80000;
	end
	bp[11] = 1'b0;
end 
// bp[ 10 ]
initial
begin
	repeat(3)
	begin
		bp[10] = 1'b0;
		bp[10] = #80000 1'b1;
		# 80000;
	end
	bp[10] = 1'b0;
end 
// bp[ 9 ]
initial
begin
	repeat(3)
	begin
		bp[9] = 1'b0;
		bp[9] = #80000 1'b1;
		# 80000;
	end
	bp[9] = 1'b0;
end 
// bp[ 8 ]
initial
begin
	repeat(3)
	begin
		bp[8] = 1'b0;
		bp[8] = #80000 1'b1;
		# 80000;
	end
	bp[8] = 1'b0;
end 
// bp[ 7 ]
initial
begin
	repeat(3)
	begin
		bp[7] = 1'b0;
		bp[7] = #80000 1'b1;
		# 80000;
	end
	bp[7] = 1'b0;
end 
// bp[ 6 ]
initial
begin
	repeat(3)
	begin
		bp[6] = 1'b0;
		bp[6] = #80000 1'b1;
		# 80000;
	end
	bp[6] = 1'b0;
end 
// bp[ 5 ]
initial
begin
	repeat(3)
	begin
		bp[5] = 1'b0;
		bp[5] = #80000 1'b1;
		# 80000;
	end
	bp[5] = 1'b0;
end 
// bp[ 4 ]
initial
begin
	repeat(3)
	begin
		bp[4] = 1'b0;
		bp[4] = #80000 1'b1;
		# 80000;
	end
	bp[4] = 1'b0;
end 
// bp[ 3 ]
initial
begin
	repeat(3)
	begin
		bp[3] = 1'b0;
		bp[3] = #80000 1'b1;
		# 80000;
	end
	bp[3] = 1'b0;
end 
// bp[ 2 ]
initial
begin
	repeat(3)
	begin
		bp[2] = 1'b0;
		bp[2] = #80000 1'b1;
		# 80000;
	end
	bp[2] = 1'b0;
end 
// bp[ 1 ]
initial
begin
	repeat(3)
	begin
		bp[1] = 1'b0;
		bp[1] = #80000 1'b1;
		# 80000;
	end
	bp[1] = 1'b0;
end 
// bp[ 0 ]
initial
begin
	repeat(3)
	begin
		bp[0] = 1'b0;
		bp[0] = #80000 1'b1;
		# 80000;
	end
	bp[0] = 1'b0;
end 
// fp[ 15 ]
initial
begin
	fp[15] = 1'b0;
	fp[15] = #160000 1'b1;
	fp[15] = #160000 1'b0;
	fp[15] = #160000 1'b1;
end 
// fp[ 14 ]
initial
begin
	fp[14] = 1'b0;
	fp[14] = #160000 1'b1;
	fp[14] = #160000 1'b0;
	fp[14] = #160000 1'b1;
end 
// fp[ 13 ]
initial
begin
	fp[13] = 1'b0;
	fp[13] = #160000 1'b1;
	fp[13] = #160000 1'b0;
	fp[13] = #160000 1'b1;
end 
// fp[ 12 ]
initial
begin
	fp[12] = 1'b0;
	fp[12] = #160000 1'b1;
	fp[12] = #160000 1'b0;
	fp[12] = #160000 1'b1;
end 
// fp[ 11 ]
initial
begin
	fp[11] = 1'b0;
	fp[11] = #160000 1'b1;
	fp[11] = #160000 1'b0;
	fp[11] = #160000 1'b1;
end 
// fp[ 10 ]
initial
begin
	fp[10] = 1'b0;
	fp[10] = #160000 1'b1;
	fp[10] = #160000 1'b0;
	fp[10] = #160000 1'b1;
end 
// fp[ 9 ]
initial
begin
	fp[9] = 1'b0;
	fp[9] = #160000 1'b1;
	fp[9] = #160000 1'b0;
	fp[9] = #160000 1'b1;
end 
// fp[ 8 ]
initial
begin
	fp[8] = 1'b0;
	fp[8] = #160000 1'b1;
	fp[8] = #160000 1'b0;
	fp[8] = #160000 1'b1;
end 
// fp[ 7 ]
initial
begin
	fp[7] = 1'b0;
	fp[7] = #160000 1'b1;
	fp[7] = #160000 1'b0;
	fp[7] = #160000 1'b1;
end 
// fp[ 6 ]
initial
begin
	fp[6] = 1'b0;
	fp[6] = #160000 1'b1;
	fp[6] = #160000 1'b0;
	fp[6] = #160000 1'b1;
end 
// fp[ 5 ]
initial
begin
	fp[5] = 1'b0;
	fp[5] = #160000 1'b1;
	fp[5] = #160000 1'b0;
	fp[5] = #160000 1'b1;
end 
// fp[ 4 ]
initial
begin
	fp[4] = 1'b0;
	fp[4] = #160000 1'b1;
	fp[4] = #160000 1'b0;
	fp[4] = #160000 1'b1;
end 
// fp[ 3 ]
initial
begin
	fp[3] = 1'b0;
	fp[3] = #160000 1'b1;
	fp[3] = #160000 1'b0;
	fp[3] = #160000 1'b1;
end 
// fp[ 2 ]
initial
begin
	fp[2] = 1'b0;
	fp[2] = #160000 1'b1;
	fp[2] = #160000 1'b0;
	fp[2] = #160000 1'b1;
end 
// fp[ 1 ]
initial
begin
	fp[1] = 1'b0;
	fp[1] = #160000 1'b1;
	fp[1] = #160000 1'b0;
	fp[1] = #160000 1'b1;
end 
// fp[ 0 ]
initial
begin
	fp[0] = 1'b0;
	fp[0] = #160000 1'b1;
	fp[0] = #160000 1'b0;
	fp[0] = #160000 1'b1;
end 
// a[ 15 ]
always
begin
	a[15] = 1'b0;
	a[15] = #5000 1'b1;
	#5000;
end 
// a[ 14 ]
always
begin
	a[14] = 1'b0;
	a[14] = #5000 1'b1;
	#5000;
end 
// a[ 13 ]
always
begin
	a[13] = 1'b0;
	a[13] = #5000 1'b1;
	#5000;
end 
// a[ 12 ]
always
begin
	a[12] = 1'b0;
	a[12] = #5000 1'b1;
	#5000;
end 
// a[ 11 ]
always
begin
	a[11] = 1'b0;
	a[11] = #5000 1'b1;
	#5000;
end 
// a[ 10 ]
always
begin
	a[10] = 1'b0;
	a[10] = #5000 1'b1;
	#5000;
end 
// a[ 9 ]
always
begin
	a[9] = 1'b0;
	a[9] = #5000 1'b1;
	#5000;
end 
// a[ 8 ]
always
begin
	a[8] = 1'b0;
	a[8] = #5000 1'b1;
	#5000;
end 
// a[ 7 ]
always
begin
	a[7] = 1'b0;
	a[7] = #5000 1'b1;
	#5000;
end 
// a[ 6 ]
always
begin
	a[6] = 1'b0;
	a[6] = #5000 1'b1;
	#5000;
end 
// a[ 5 ]
always
begin
	a[5] = 1'b0;
	a[5] = #5000 1'b1;
	#5000;
end 
// a[ 4 ]
always
begin
	a[4] = 1'b0;
	a[4] = #5000 1'b1;
	#5000;
end 
// a[ 3 ]
always
begin
	a[3] = 1'b0;
	a[3] = #5000 1'b1;
	#5000;
end 
// a[ 2 ]
always
begin
	a[2] = 1'b0;
	a[2] = #5000 1'b1;
	#5000;
end 
// a[ 1 ]
always
begin
	a[1] = 1'b0;
	a[1] = #5000 1'b1;
	#5000;
end 
// a[ 0 ]
always
begin
	a[0] = 1'b0;
	a[0] = #5000 1'b1;
	#5000;
end 
// b[ 15 ]
always
begin
	b[15] = 1'b0;
	b[15] = #10000 1'b1;
	#10000;
end 
// b[ 14 ]
always
begin
	b[14] = 1'b0;
	b[14] = #10000 1'b1;
	#10000;
end 
// b[ 13 ]
always
begin
	b[13] = 1'b0;
	b[13] = #10000 1'b1;
	#10000;
end 
// b[ 12 ]
always
begin
	b[12] = 1'b0;
	b[12] = #10000 1'b1;
	#10000;
end 
// b[ 11 ]
always
begin
	b[11] = 1'b0;
	b[11] = #10000 1'b1;
	#10000;
end 
// b[ 10 ]
always
begin
	b[10] = 1'b0;
	b[10] = #10000 1'b1;
	#10000;
end 
// b[ 9 ]
always
begin
	b[9] = 1'b0;
	b[9] = #10000 1'b1;
	#10000;
end 
// b[ 8 ]
always
begin
	b[8] = 1'b0;
	b[8] = #10000 1'b1;
	#10000;
end 
// b[ 7 ]
always
begin
	b[7] = 1'b0;
	b[7] = #10000 1'b1;
	#10000;
end 
// b[ 6 ]
always
begin
	b[6] = 1'b0;
	b[6] = #10000 1'b1;
	#10000;
end 
// b[ 5 ]
always
begin
	b[5] = 1'b0;
	b[5] = #10000 1'b1;
	#10000;
end 
// b[ 4 ]
always
begin
	b[4] = 1'b0;
	b[4] = #10000 1'b1;
	#10000;
end 
// b[ 3 ]
always
begin
	b[3] = 1'b0;
	b[3] = #10000 1'b1;
	#10000;
end 
// b[ 2 ]
always
begin
	b[2] = 1'b0;
	b[2] = #10000 1'b1;
	#10000;
end 
// b[ 1 ]
always
begin
	b[1] = 1'b0;
	b[1] = #10000 1'b1;
	#10000;
end 
// b[ 0 ]
always
begin
	b[0] = 1'b0;
	b[0] = #10000 1'b1;
	#10000;
end 
endmodule

